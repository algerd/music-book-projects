1) Сделать мнемонки контекстному меню

2) Overview
(ArtistOverview) Oбщая таблица артистов с поиском и фильтрами:
    rank | artist | genre | rating

    Фильтры: 
        селекторы:
        - жанр
        - минимум рейтинг
        - максимум рейтинга
    Поиск:
        - группа

(AlbumOverview) Oбщая таблица альбомов с поиском и фильтрами:
    rank | группа | альбом | год | жанр | рейтинг альбома 

    Фильтры:
        селекторы:
        - жанр
        - минимум рейтинга
        - максимум рейтинга
        - минимум год
        - максимум год

    Поиск:
        поле + селектор (группа, альбом)

(SongOverview) Общая таблица песен:
    rank | песня| группа | альбом | год | жанр | рейтинг песни 
    Фильтры: 
        селекторы:
        - жанр
        - минимум рейтинга
        - максимум рейтинга

    Поиск:
        поле + селектор (группа, альбом, песня)


3) Музыканты:
Таблицы бд:
    - общая:
        id_музыкант
        id_группы
        start_date дата присоединения к группе
        end_date дата ухода из группы
        рейтинг музыканта за данный период участия в группе

    - музыканта
        фио
        год рождения
        год смерти
        специализация (вокал, гитара и т.д.)
        рейтинг 

В таблице альбомов надо бы указать музыкантов, записисывающих альбом.
В таблице песен надо бы указать музыкантов, сочинивших песню.

Детальная страница музыканта: его данные и таблица групп и альбомов, в которых он принимал участие.
Таблица музыкантов в группе на странице ArtistPane
Общая таблица музыкантов (overview).

4) Жанры.
Сделать преднабор жанров, а также возможность добавления пользовательских жанров.
Таблица жанров:
    id
    название жанра
    описание
    комментарий
    рейтинг

ПРБЛЕМА:
    - в таблицах отслеживаются изменения только свойств табличного объекта (напр. nameProperty() у Album).
    Но нет возможности в таблице отслеживать свойства других объектов (напр свойств родителя таблицы Album объекта Artist)
    Для решения этой проблемы есть два костыля:
    1. Продублировать свойства другого объекта в сущности табличного объекта и связать их между сбой (bind).
        Это очень плохое решение, которое ведёт к разбуханию кода и существенно отжирает память.
    2. Повесить слушателей на изменение нетабличных объектов, которые будут рефрешить таблицу.
        Это не всегда возможно без существенного добавления кода и значительно снижает производительность из-за
        обновлени таблиц. Но т.к. изменение(update) cущностей не столь часты, поэтому лучше изредка жертвовать
        производительностью на обновление таблиц, чем напостоянно потратить память на хранение свойств-дублёров.
        Этот путь я и реализовал:
            - прямые свойства отслеживать
            - добавление и удаление - отслеживать
            - update непрямых свойств - рефрешить таблицу

//////////////////////////
В овервью в хайде посмотреть как сделать очистку таблицы для освобождения памяти
В левой колонке над деревом сделать 4 менюшки:
    - артисты, альбомы, песни, музыканты и все они будут открывать соответствующие overview


!!! Сделать все окна с помощью tab и применить код для перетаскивания окон в любое место экрана.

Сделать детальную страницу для жанра со списком групп или альбомов(селектором выбирать).
Сделать мнемоники кнопкам.

Разбить на пакажи код:
    - artist
    - album
    - song
    - genre
    - main

Удаление, добавление и обновление бд делать с помощью слушателей таблиц сущностей.
Напр. при удалении сущности их таблицы вызывается слушатель, который тут же удаляет запись из бд.
Слушатели вешаются на коллекции сущностей таблиц. 
Методы слушателей реализовать в классах таблиц и убрать соответствующие методы работы с таблицами из контроллеров.
В контроллерах будут меняться только коллекции сущностей. При изменении коллекции сущностей будут вызываться
слушатели, которые будут производить соответствующие изменеия в бд.
Минус: при такой организации возможна только полная выборка всех записей из бд. 
При частичной выборке более роздняя дозагрузка будет вызывать слушателей на изменение бд. Тогда надо
блокировать вызовы слушателей при дозагрузках и сбросе ненужных данных из сущностей.

Сделать в родительской таблице коллекцию детских таблиц. При удалении сущности в родительской таблицу
удалять записи в детской таблице, имеющие удалённую сущность.

Сделать контекстноt меню в картинках: load, paste, clear Image

?? Объединить MusicianOverview(сделан) и MusicianGroupOverview

Написать код расчёта высоты таблицы по сумме высот строк, чтобы cделать скроллироание таблиц по вертикали при заполнении тблицы.

Сделать из textArea описаний и комментариев сущностей HTMLEditors. Сохранять html-код и для вывода на странице 
использовать WebView. Проверить производительность и потребление памяти. 
Значение в веб-вью должно отслеживать изменения.


Разбить приложение на модули MVC:
    MVC:
        Artist:
            - module: untity+table: 
                Artist, ArtistTable

            - view: css+fxml (css только локальные, глобальные css надо выносить в общую папку?): 
                ArtistDialog, ArtistOverview, ArtistPane

            - controller: fxml-controllers:
                ArtistDialogController, ArtistOverviewController, ArtistPaneController

Проблемы:
    1. css - css привязан к конкретному fxml и распространяет действие на вложенные fxml
        Поэтому глобальные стили будут в глобальном mvc-модуле (Main для Main.fxml)

    2. Могут быть отдельные mvc, не имеющие модели, фактически view-помошники. Напр. DialogImageBox.
        Их надо располагать в отдельном каталоге HelpersView (или просто Helpers). Они будут иметь
        структуру: 
        Helpers:
            DialogImageBox:
                - controller: DialogImageBoxController              
                - view: DialogImageBox
        Рассмотреть возможность переноса ContextMenuManager в Helpers или Plugins 

    3. Могут быть контроллеры, не имеющие вида, выполняющие определённые вспомогательные функции: проверки,
        локализация и берущие на себя определённые повторяющиеся функции контроллеров mvc. 
        Их надо располагать в отдельном каталоге Plugins.

Самая большая и неразрешимая проблема - модель. Одна сущность может использоваться в разных блоках,
поэтому сущности бд нельзя переносить в модели конкретных блоков. Как альтернатива, можно создвавать
в модели классов-врапперов сущностей, включающие и дополнительные свойства, не входящие в сущность бд,
но необходимые для контроллеров. Напр. класс MusicianInfo в ArtistPaneController - это враппер двух сущностей бд.
Вывод: сущности бд оставлять в паккаже db. В моделях делать, при необходимости, врапперы сущностей бд.
Сущности бд - чистые копии полей бд. Врапперы сущностей бд - объект сущности бд + доп. свойства.         

Диалоговы окна разметить в отдельном mvc-пакете?

При добавлении музыкунта в группу проверять есть ли уже такой музыкант группы в заданном промежутке времени.